server.port=${appPort}
#server.port=8081
#server.address=192.168.0.100
#server.address=0.0.0.0
#server.servlet.session.timeout = 180
#server.servlet.context-path=/springboot

spring.http.encoding.force=true

spring.freemarker.checkTemplateLocation=false

#\u4E0A\u4F20\u6587\u4EF6\u5927\u5C0F
#spring.servlet.multipart.enabled =true
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=200MB


#spring.servlet.multipart.location=upload
#server.tomcat.max-swallow-size = -1

#Gzip
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript
#\u9ED8\u8BA4\u5C31\u662F2048 byte
server.compression.min-response-size=2048


#\u7BA1\u7406\u8282\u70B9
management.context-path=/admin
management.address=127.0.0.1
management.add-application-context-header=false

#\u5B89\u5168


#\u7F13\u5B58
#spring.resources.cache.cachecontrol.cache-private= # Indicate that the response message is intended for a single user and must not be stored by a shared cache.
#spring.resources.cache.cachecontrol.cache-public= # Indicate that any cache may store the response.
#spring.resources.cache.cachecontrol.max-age= # Maximum time the response should be cached, in seconds if no duration suffix is not specified.
#spring.resources.cache.cachecontrol.must-revalidate= # Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.
#spring.resources.cache.cachecontrol.no-cache= # Indicate that the cached response can be reused only if re-validated with the server.
#spring.resources.cache.cachecontrol.no-store= # Indicate to not cache the response in any case.
#spring.resources.cache.cachecontrol.no-transform= # Indicate intermediaries (caches and others) that they should not transform the response content.
#spring.resources.cache.cachecontrol.proxy-revalidate= # Same meaning as the "must-revalidate" directive, except that it does not apply to private caches.
#spring.resources.cache.cachecontrol.s-max-age= # Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.
#spring.resources.cache.cachecontrol.stale-if-error= # Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.
#spring.resources.cache.cachecontrol.stale-while-revalidate= # Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.
#
#
# \u662F\u5426\u542F\u7528\u9ED8\u8BA4\u8D44\u6E90\u5904\u7406
#spring.resources.add-mappings=true
#spring.resources.cache.cachecontrol.cache-private= # \u8868\u793A\u54CD\u5E94\u6D88\u606F\u662F\u9488\u5BF9\u5355\u4E2A\u7528\u6237\u7684\uFF0C\u4E0D\u80FD\u7531\u5171\u4EAB\u7F13\u5B58\u5B58\u50A8\u3002
#spring.resources.cache.cachecontrol.cache-public= # \u8868\u793A\u4EFB\u4F55\u7F13\u5B58\u90FD\u53EF\u4EE5\u5B58\u50A8\u54CD\u5E94
#spring.resources.cache.cachecontrol.max-age= # \u54CD\u5E94\u88AB\u7F13\u5B58\u7684\u6700\u5927\u65F6\u95F4\uFF0C\u5982\u679C\u6CA1\u6709\u6307\u5B9A\u6301\u7EED\u65F6\u95F4\u540E\u7F00\uFF0C\u4EE5\u79D2\u4E3A\u5355\u4F4D\u3002
#spring.resources.cache.cachecontrol.must-revalidate= # \u8868\u660E\uFF0C\u4E00\u65E6\u7F13\u5B58\u8FC7\u671F\uFF0C\u5728\u672A\u4E0E\u670D\u52A1\u5668\u91CD\u65B0\u9A8C\u8BC1\u4E4B\u524D\uFF0C\u7F13\u5B58\u4E0D\u80FD\u4F7F\u7528\u54CD\u5E94\u3002
#spring.resources.cache.cachecontrol.no-cache= # \u8868\u793A\u7F13\u5B58\u7684\u54CD\u5E94\u53EA\u6709\u5728\u670D\u52A1\u5668\u91CD\u65B0\u9A8C\u8BC1\u65F6\u624D\u80FD\u91CD\u7528
#spring.resources.cache.cachecontrol.no-store= # \u8868\u793A\u5728\u4EFB\u4F55\u60C5\u51B5\u4E0B\u90FD\u4E0D\u7F13\u5B58\u54CD\u5E94
#spring.resources.cache.cachecontrol.no-transform= # \u6307\u793A\u4E2D\u4ECB(\u7F13\u5B58\u548C\u5176\u4ED6)\u5B83\u4EEC\u4E0D\u5E94\u8BE5\u8F6C\u6362\u54CD\u5E94\u5185\u5BB9
#spring.resources.cache.cachecontrol.proxy-revalidate= # \u4E0E\u201Cmust-revalidate\u201D\u6307\u4EE4\u7684\u542B\u4E49\u76F8\u540C\uFF0C\u53EA\u662F\u5B83\u4E0D\u9002\u7528\u4E8E\u79C1\u6709\u7F13\u5B58\u3002
#spring.resources.cache.cachecontrol.s-max-age= # \u54CD\u5E94\u88AB\u5171\u4EAB\u7F13\u5B58\u7F13\u5B58\u7684\u6700\u5927\u65F6\u95F4\uFF0C\u5982\u679C\u6CA1\u6709\u6307\u5B9A\u6301\u7EED\u65F6\u95F4\u540E\u7F00\uFF0C\u4EE5\u79D2\u4E3A\u5355\u4F4D\u3002
#spring.resources.cache.cachecontrol.stale-if-error= # \u5F53\u9047\u5230\u9519\u8BEF\u65F6\uFF0C\u54CD\u5E94\u53EF\u80FD\u4F7F\u7528\u7684\u6700\u5927\u65F6\u95F4\uFF0C\u5982\u679C\u6CA1\u6709\u6307\u5B9A\u6301\u7EED\u65F6\u95F4\u540E\u7F00\uFF0C\u4EE5\u79D2\u4E3A\u5355\u4F4D\u3002
#spring.resources.cache.cachecontrol.stale-while-revalidate= # \u5982\u679C\u6CA1\u6709\u6307\u5B9A\u6301\u7EED\u65F6\u95F4\u540E\u7F00\uFF0C\u5219\u54CD\u5E94\u5728\u8FC7\u671F\u540E\u53EF\u4EE5\u63D0\u4F9B\u7684\u6700\u957F\u65F6\u95F4(\u4EE5\u79D2\u4E3A\u5355\u4F4D)\u3002
#spring.resources.cache.period= # \u8D44\u6E90\u5904\u7406\u7A0B\u5E8F\u63D0\u4F9B\u7684\u8D44\u6E90\u7684\u7F13\u5B58\u5468\u671F\u3002\u5982\u679C\u6CA1\u6709\u6307\u5B9A\u6301\u7EED\u65F6\u95F4\u540E\u7F00\uFF0C\u5C06\u4F7F\u7528\u79D2\u3002
#spring.resources.chain.cache=true # \u662F\u5426\u5728\u8D44\u6E90\u94FE\u4E2D\u542F\u7528\u7F13\u5B58\u3002
#spring.resources.chain.compressed=false # \u662F\u5426\u542F\u7528\u5DF2\u538B\u7F29\u8D44\u6E90(gzip, brotli)\u7684\u89E3\u6790\u3002
#spring.resources.chain.enabled= # \u662F\u5426\u542F\u7528Spring\u8D44\u6E90\u5904\u7406\u94FE\u3002\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C\u7981\u7528\uFF0C\u9664\u975E\u81F3\u5C11\u542F\u7528\u4E86\u4E00\u4E2A\u7B56\u7565\u3002
#spring.resources.chain.html-application-cache=false # \u662F\u5426\u542F\u7528HTML5\u5E94\u7528\u7F13\u5B58\u6E05\u5355\u91CD\u5199\u3002
#spring.resources.chain.strategy.content.enabled=false # \u662F\u5426\u542F\u7528\u5185\u5BB9\u7248\u672C\u7B56\u7565\u3002
#spring.resources.chain.strategy.content.paths=/** # \u5E94\u7528\u4E8E\u5185\u5BB9\u7248\u672C\u7B56\u7565\u7684\u4EE5\u9017\u53F7\u5206\u9694\u7684\u6A21\u5F0F\u5217\u8868\u3002
#spring.resources.chain.strategy.fixed.enabled=false # \u662F\u5426\u542F\u7528\u56FA\u5B9A\u7248\u672C\u7B56\u7565\u3002
#spring.resources.chain.strategy.fixed.paths=/** # \u7528\u4E8E\u56FA\u5B9A\u7248\u672C\u7B56\u7565\u7684\u4EE5\u9017\u53F7\u5206\u9694\u7684\u6A21\u5F0F\u5217\u8868\u3002
#spring.resources.chain.strategy.fixed.version= # \u7528\u4E8E\u56FA\u5B9A\u7248\u672C\u7B56\u7565\u7684\u7248\u672C\u5B57\u7B26\u4E32\u3002
# \u9759\u6001\u8D44\u6E90\u7684\u4F4D\u7F6E\u3002
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/

# \u7F13\u5B58
# Maximum time the response should be cached (in seconds)
spring.resources.cache.cachecontrol.max-age=120s
# The cache must re-validate stale resources with the server. Any expired resources must not be used without re-validating.
spring.resources.cache.cachecontrol.must-revalidate=true

#\u6700\u5927\u8FDE\u63A5\u6570
server.tomcat.max-connections=10000
#\u6700\u5927\u7EBF\u7A0B\u6570
server.tomcat.max-threads=1000
#\u6700\u5927\u7B49\u5F85\u6570
server.tomcat.accept-count=2000
#Time that connectors wait for another HTTP request before closing the connection. When not set, the connector\u2019s container-specific default is used. Use a value of -1 to indicate infinite timeout.
server.connection-timeout=10s